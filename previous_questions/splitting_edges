#include<bits/stdc++.h>
using namespace std;
 
int dfs(int node, int val, vector<int>& nval, vector<int>& two, vector<int>& three, map<int,bool>& vis, map<int,vector<int>>& adjlist) {
    if(vis[node]) return 0;
    vis[node] = true;
    int cnt = 0;
    if(val == 2) cnt = (nval[node] == 2);
    else cnt = (nval[node] == 3);
 
    for(auto i: adjlist[node]) {
        if(!vis[i]) {
            cnt += dfs(i, val, nval, two, three, vis, adjlist);
        }
    }
 
    if(val == 2) return two[node] = cnt;
    if(val == 3) return three[node] = cnt;
    return cnt;
}
 
int solve(int node, int ttwo, int three_cnt, vector<int>& two, vector<int>& three, map<int,bool>& vis, map<int,vector<int>>& adjlist) {
    if(vis[node]) return 0;
    vis[node] = true;
    int cnt = 0;
 
    for(auto x: adjlist[node]) {
        if(!vis[x]) {
            //cout << node << "->" << x << " " << two[x] << " " << three[x] << " " << ttwo-two[x] << " " << tthree-three[x] << endl;
            int flag2 = (two[x] > 0 && three[x] > 0);
            int flag3 = (two_cnt - two[x] > 0 && three_cnt - three[x] > 0);
             
            if(!flag2 and !flag3) {
                cnt++;
            }
 
            cnt += solve(x, two_cnt, three_cnt, two, three, vis, adjlist);
        }
    }
    return cnt;
}
 
void hemanth_hp() {
    int n;
    cin >> n;
    vector<int> nval(n+1, 0);
    for(int i = 1; i <= n; i++) cin >> nval[i];
 
    map<int,vector<int>> adjlist;
    for(int i = 1; i < n; i++) {
        int x, y;
        cin >> x >> y;
        adjlist[x].push_back(y);
        adjlist[y].push_back(x);
    }
 
    vector<int> two(n+1, 0), three(n+1, 0);
    map<int,bool> vis, vis2, vis3;
 
    int two_cnt = dfs(1, 2, nval, two, three, vis2, adjlist);
    int three_cnt = dfs(1, 3, nval, two, three, vis3, adjlist);
 
    int ans = solve(1, two_cnt, three_cnt, two, three, vis, adjlist);
    cout << ans << endl;
}
 
int main() {
    int t;
    cin >> t;
    while(t--) {
        hemanth_hp();
    }
}
