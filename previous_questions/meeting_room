#include<bits/stdc++.h>
using namespace std;
long long solution(int ind,int n,int met,vector<int>&ppl,vector<int>&st,vector<int>&et,vector<long long>&dp){
    if(ind>=n)return 0;
    if(dp[ind]!=-1)return dp[ind];
    long long pick=0;
    if(met<st[ind]){
        pick=ppl[ind]+solution(ind+1,n,et[ind],ppl,st,et,dp);
    }
    long long notpick=solution(ind+1,n,met,ppl,st,et,dp);
    return dp[ind]=max(notpick,pick);
}

long long solve(int N,vector<int>&people,vector<int>&starting ,vector<int>&ending){
    long long total=0;
    for(auto i: people)total+=i;
    vector<long long>dp(N+1,-1);
    return total-solution(0,N,0,people,starting,ending,dp);
}
int main(){
    int n; cin>>n;
    vector<int>ppl(n,0),st(n,0),et(n,0);
    for(int i=0; i<n; i++)cin>>ppl[i];
    for(int i=0; i<n; i++)cin>>st[i];
    for(int i=0; i<n; i++)cin>>et[i];
    cout<<solve(n,ppl,st,et)<<endl;
}


-----------------------------------

int solve(int n, vector<int> &people, vector<int> &starting, vector<int> &ending){
    vector<vector<int>> timing(n, vector<int>(2, 0));
    int total = 0;
    for(int i=0; i<n; i++){
        timing[i][0] = starting[i];
        timing[i][1] = ending[i];
        total += people[i];
    }
    sort(timing.begin(), timing.end());
    
    priority_queue<int, vector<int>, greater<int>> pq;
    int count = 0;
    
    for(int i=0; i<n; i++){
        if(pq.empty()){
            pq.push(timing[i][1]);
        } 
        else {
            if(pq.top() < timing[i][0]) {
                pq.pop();
                pq.push(timing[i][1]);
                count += people[i];
            } else {
                pq.push(timing[i][1]);
            }
        }
    }
    return total - count;
}

--------------------------------------------------

long long solve(int n, vector<int> &people, vector<int> &starting, vector<int> &ending){
    vector<vector<int>> timing(n, vector<int>(3, 0));
    for(int i=0; i<n; i++){
        timing[i][0] = starting[i];
        timing[i][1] = ending[i];
        timing[i][2] = people[i];
    }
    sort(timing.begin(), timing.end());
    
    priority_queue<int, vector<int>, greater<int>> pq;
    long long peopleWithoutRoom = 0;
    
    for(int i=0; i<n; i++){
        while (!pq.empty() && pq.top() < timing[i][0]) {
            pq.pop();
        }

        if (pq.size() < 1) {
            pq.push(timing[i][1]);
        } else {
            peopleWithoutRoom += timing[i][2];
        }
    }

    return peopleWithoutRoom;
}
