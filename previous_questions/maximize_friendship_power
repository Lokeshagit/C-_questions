#include <bits/stdc++.h>
using namespace std;

int MOD = 998244353;

int dfs(int node, vector<int>& vis, vector<vector<int>>& graph){
    vis[node] = 1;
    int cnt=1;
    for(auto adjNode : graph[node]){
        if(!vis[adjNode]){
            cnt += dfs(adjNode, vis, graph);
        }
    }
    return cnt;
}
int friendship_power(int N, int M, vector<vector<int>>& roads, vector<int>& power){
    vector<vector<int>> graph(N+1);
    for(auto r: roads){
        graph[r[0]].push_back(r[1]);
        graph[r[1]].push_back(r[0]);
    }
    vector<int> vis(N+1, 0), comp;
    for(int i=1; i<=N; i++){
        if(!vis[i]){
            comp.push_back(dfs(i, vis, graph));
        }
    }
    sort(power.rbegin(), power.rend());
    sort(comp.rbegin(), comp.rend());
    int max_pow=0, i=0;
    for(auto x:comp){
        int sum=0;
        while(x--){
            sum += power[i++];
        }
        max_pow += (sum * (sum-1))/2;
    }
    return max_pow%MOD;
}

int main()
{
    int N, M;
    cin >> N >> M;
    vector<vector<int>> roads(M);
    for(int i=0; i<M; i++) {
        int u, v;
        cin >> u >> v;
        roads[i].push_back(u);
        roads[i].push_back(v);
    }
    vector<int> power(N);
    for(int i=0; i<N; i++) cin >> power[i];
    cout << friendship_power(N, M, roads, power) << endl;
    return 0;
}
