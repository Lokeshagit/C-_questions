subtree queries


#include <iostream>
#include <bits/stdc++.h>
using namespace std;

int find_gcd(vector<int> &w, int node){
    int X = w[node-1];
    int cnt = 0;
    for(int M=1; M<=X; M++){
        if(__gcd(M, X) == 1) cnt++;
    }
    return cnt;
}

vector<int> solve(int N, int Q, vector<int> &w, vector<vector<int>> &edges, vector<vector<int>> &queries) {
    vector<int> adj[N+1];
    vector<int> ans;
    for(auto it : edges){
        adj[it[0]].push_back(it[1]);
    }
    for(int i=0; i<Q; i++){
        int type = queries[i][0];
        int node = queries[i][1];
        switch(type) {
            case 1:
                w[node-1] = queries[i][2];
                break;
            case 2: {
                long long sum=0;
                sum += find_gcd(w, node);
                queue<int> q;
                q.push(node);
                while(!q.empty()){
                    int n = q.front();
                    q.pop();
                    for(auto adjNode : adj[n]){
                        sum += find_gcd(w, adjNode);
                        q.push(adjNode);
                    }
                }
                ans.push_back(sum);
            }
        }
    }
    return ans;
}

int main()
{
    int N=5, Q=3;
    vector<int> w{3,5,9,6,10};
    vector<vector<int>> edges{{1,2}, {1,4}, {1,5}, {2,3}};
    vector<vector<int>> queries{{2,1,0}, {1,3,1}, {2,2,0}};
    
    vector<int> res = solve(N, Q, w, edges, queries);
    
    for(int i=0; i<res.size(); i++){
        cout << res[i] << " ";
    }

    return 0;
}
