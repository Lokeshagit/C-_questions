#include<bits/stdc++.h>
using namespace std;
int bfs(int node, long long K, vector<vector<int>>& graph, vector<int>& A){
    queue<pair<int, int>> q;
    int cnt=0;
    if(A[node-1] <= K) {
        q.push({node, A[node-1]});
        cnt++;
    } else {
        return 0;
    }
    while(!q.empty()){
        int n = q.front().first;
        int amount = q.front().second;
        q.pop();
        
        for(auto adjNode : graph[n]){
            if(amount + A[adjNode-1] <= K) {
                cnt++;
                q.push({adjNode, amount+A[adjNode-1]});
            } else {
                cout << node << " -> " << cnt << endl;
                return cnt;
            }
        }
    }
    cout << node << " -> " << cnt << endl;
    return cnt;
}

int solve(int N, long long K, vector<int>& A, vector<vector<int>>& edges){
    vector<vector<int>> graph(N+1);
    for(auto it : edges){
        graph[it[1]].push_back(it[0]);
    }

    int maxcnt=0;
    for(int i=2; i<=N; i++){
        maxcnt = max(maxcnt, bfs(i, K, graph, A));
    }
    //cout<<endl;
    return maxcnt;
}

int main(){
    int N=6;
    long long K=10;
    vector<vector<int>> edges = {{1,2}, {1,3}, {3,4}, {3,5}, {5,6}};
    vector<int> A = {4,12,3,2,5,3};
    int res = solve(N, K, A, edges);
    cout << res << endl;
}
